import java.util.*;

/* Herman Peng
 * 1st period
 * December 5th, 2016
 * StringSplit Assignment
 */
public class FracCalc {
	public static void main(String[] args){
		String input;
		Scanner console = new Scanner(System.in);
		do {
			System.out.println("Please enter in your input. Type \"quit\" to exit.");
			input = console.nextLine();
			System.out.println(produceAnswer(input));
		} while (input != "quit");
	}
	public static String produceAnswer(String inputFromMain){
		String[] resultParseInput = parseInput(inputFromMain);
		String leftOperand = resultParseInput[0];
		String operator = resultParseInput[1];
		String rightOperand = resultParseInput[2];
		int[] parsedLeftOperand = parseOperand(leftOperand);
		int[] parsedRightOperand = parseOperand(rightOperand);
		int[] improperFracLeftOperand = toImproperFrac(parsedLeftOperand);
		int[] improperFracRightOperand = toImproperFrac(parsedRightOperand);
		int[] resultCommonDenominator = commonDenominator(improperFracLeftOperand, improperFracRightOperand);
		if (operator == "+"){
			return addition(resultCommonDenominator);
		}
		else if (resultCommonDenominator[3] == 2){
			return subtraction(resultCommonDenominator);
		}
		else if (resultCommonDenominator[3] == 3){
			return multiplication(resultCommonDenominator);
		}
		else if (resultCommonDenominator[3] == 4){
			return division(resultCommonDenominator);
		}
		else {
			String error = "Encountered unexpected error.";
			return error;
		}
	}
	public static String[] parseInput(String userInput){
		String[] separateOperandsOperators = userInput.split(" ");
		return separateOperandsOperators;
	}
	public static int[] parseOperand(String operand){
		String[] wholeNumberNumeratorDenominator = operand.split("_");
		wholeNumberNumeratorDenominator = operand.split("/");
		int[] brokenDownDigits = new int[wholeNumberNumeratorDenominator.length];
	    for (int i=0; i < wholeNumberNumeratorDenominator.length; i++) {
	        brokenDownDigits[i] = Integer.parseInt(wholeNumberNumeratorDenominator[i]);
	    }
	    return brokenDownDigits;
	}
	public static int[] toImproperFrac(int[] operand){
		operand[1] = operand[2] * operand[0] + operand[1];
		int[] improperFraction = {operand[1], operand[2]};
		return improperFraction;
	}
	public static int[] commonDenominator(int[] leftOperand, int[] rightOperand){
		leftOperand[0] = leftOperand[0] * rightOperand[1];
		rightOperand[0] = rightOperand[0] * leftOperand[1];
		leftOperand[1] = leftOperand[1] * rightOperand[1];
		rightOperand[1] = rightOperand[1] * leftOperand[1];
		int[] twoCommonFractions = {leftOperand[0], leftOperand[1], rightOperand[0], rightOperand[1]};
		return twoCommonFractions;
	}
	public static String addition(int[] expression){
		int intNumerator = expression[0] + expression[2];
		String stringNumerator = Integer.toString(intNumerator);
		String answerString = stringNumerator + "/" + expression[1];
		return answerString;
	}
	public static String subtraction(int[] expression){
		int intNumerator = expression[0] - expression[2];
		String stringNumerator = Integer.toString(intNumerator);
		String answerString = stringNumerator + "/" + expression[1];
		return answerString;
	}
	public static String multiplication(int[] expression){
		int intNumerator = expression[0] * expression[2];
		int intDenominator = expression[1] * expression[3];
		String stringNumerator = Integer.toString(intNumerator);
		String stringDenominator = Integer.toString(intDenominator);
		String answerString = stringNumerator + "/" + stringDenominator;
		return answerString;
	}
	public static String division(int[] expression){
		int intNumerator = expression[0] * expression[3];
		int intDenominator = expression[1] * expression[2];
		String stringNumerator = Integer.toString(intNumerator);
		String stringDenominator = Integer.toString(intDenominator);
		String answerString = stringNumerator + "/" + stringDenominator;
		return answerString;
	}
}
